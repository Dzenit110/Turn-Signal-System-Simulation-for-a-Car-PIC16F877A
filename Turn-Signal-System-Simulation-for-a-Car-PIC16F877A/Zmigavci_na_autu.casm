;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC12,PIC16 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

//************************************************************************************
//**  
//**  File name:     E:\Skola\Mirkoracunari\Zmigavci na autu\Zmigavci_na_autu.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.5.2.1
//**  Date:          Sunday, October 15, 2017 12:18:44
//**  Licence:       Professional
//**  Registered to: xyz
//**  Licence key:   WUK7B9
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 0
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 0
#define MX_USES_SINT32 0
#define MX_USES_BOOL 1
#define MX_USES_UINT16 0
#define MX_USES_UINT32 0
//Defines for microcontroller
#define P16F877
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_30
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_TYPE2
#define MX_EE_SIZE 256
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT portc
#define MX_SPI_1_MISO_TRIS trisc
#define MX_SPI_1_MISO_PIN 4
#define MX_SPI_1_MOSI_PORT portc
#define MX_SPI_1_MOSI_TRIS trisc
#define MX_SPI_1_MOSI_PIN 5
#define MX_SPI_1_CLK_PORT portc
#define MX_SPI_1_CLK_TRIS trisc
#define MX_SPI_1_CLK_PIN 3
#define MX_SPI_1_SS_PORT portc
#define MX_SPI_1_SS_TRIS trisc
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 6
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 7
#define MX_I2C
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT portc
#define MX_I2C_1_SDA_TRIS trisc
#define MX_I2C_1_SDA_PIN 4
#define MX_I2C_1_SCL_PORT portc
#define MX_I2C_1_SCL_TRIS trisc
#define MX_I2C_1_SCL_PIN 3
#define MX_PWM
#define MX_PWM_CNT 2
#define MX_PWM_PSCA1
#define MX_PWM_PSCA4
#define MX_PWM_PSCA16
#define MX_PWM_1_PORT portc
#define MX_PWM_1_TRIS trisc
#define MX_PWM_1_PIN 2
#define MX_PWM_2_PORT portc
#define MX_PWM_2_TRIS trisc
#define MX_PWM_2_PIN 1

//Functions
#define MX_CLK_SPEED 10000000
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x2007, 0x3f7a
#endif
#ifdef HI_TECH_C
__CONFIG(0x3f7a);
#endif

//Internal functions
#include "C:\Program Files (x86)\Flowcode\v5\FCD\internals.c"

//Macro function declarations
void FCM_blink_cetiri();


//Variable declarations
#define FCV_FALSE (0)
#define FCV_TRUE (1)
MX_UINT8 FCV_ULAZI;



#include "C:\Program Files (x86)\Flowcode\v5\CAL\includes.c"

//Macro implementations


void FCM_blink_cetiri()

{

	//Output
	//Output: 252 -> PORTB
	trisb = 0x00;
0028  1683  	BSF STATUS, RP0
0029  1303  	BCF STATUS, RP1
002A  0186  	CLRF gbl_trisb

	portb = (252);
002B  30FC  	MOVLW 0xFC
002C  1283  	BCF STATUS, RP0
002D  0086  	MOVWF gbl_portb


	//Delay
	//Delay: 500 ms
	delay_ms(255);
002E  30FF  	MOVLW 0xFF
002F  00C3  	MOVWF delay_ms_00000_arg_del
0030  2010  	CALL delay_ms_00000

	delay_ms(245);
0031  30F5  	MOVLW 0xF5
0032  00C3  	MOVWF delay_ms_00000_arg_del
0033  2010  	CALL delay_ms_00000


	//Output
	//Output: 255 -> PORTB
	trisb = 0x00;
0034  1683  	BSF STATUS, RP0
0035  0186  	CLRF gbl_trisb

	portb = (255);
0036  30FF  	MOVLW 0xFF
0037  1283  	BCF STATUS, RP0
0038  0086  	MOVWF gbl_portb


	//Delay
	//Delay: 500 ms
	delay_ms(255);
0039  00C3  	MOVWF delay_ms_00000_arg_del
003A  2010  	CALL delay_ms_00000

	delay_ms(245);
003B  30F5  	MOVLW 0xF5
003C  00C3  	MOVWF delay_ms_00000_arg_del
003D  2010  	CALL delay_ms_00000


}
003E  0008  	RETURN




void main()

{
	//Initialization
	adcon1 = 0x07;
003F  3007  	MOVLW 0x07
0040  1683  	BSF STATUS, RP0
0041  1303  	BCF STATUS, RP1
0042  009F  	MOVWF gbl_adcon1



	//Interrupt initialization code
	option_reg = 0xC0;
0043  30C0  	MOVLW 0xC0
0044  0081  	MOVWF gbl_option_reg



	//Output
	//Output: 255 -> PORTB
	trisb = 0x00;
0045  0186  	CLRF gbl_trisb

	portb = (255);
0046  30FF  	MOVLW 0xFF
0047  1283  	BCF STATUS, RP0
0048  0086  	MOVWF gbl_portb


	//Calculation
	//Calculation:
	//  ulazi = 0
	FCV_ULAZI = 0;
0049  01C2  	CLRF gbl_FCV_ULAZI


	//Loop
	//Loop: While 1
	while (1)
004A        label3
009C  284A  	GOTO	label3

	{

		//Input
		//Input: PORTA -> ulazi
		trisa = trisa | 0xFF;
004A  30FF  	MOVLW 0xFF
004B  1683  	BSF STATUS, RP0
004C  0405  	IORWF gbl_trisa, W
004D  0085  	MOVWF gbl_trisa

		FCV_ULAZI = porta;
004E  1283  	BCF STATUS, RP0
004F  0805  	MOVF gbl_porta, W
0050  00C2  	MOVWF gbl_FCV_ULAZI


		//Switch
		//Switch: ulazi?
		switch (FCV_ULAZI)
0064  284A  	GOTO	label3

		{
			case 0:
0051  0842  	MOVF gbl_FCV_ULAZI, W
0052  3A00  	XORLW 0x00
0053  1903  	BTFSC STATUS,Z
0054  2865  	GOTO	label4
0065        label4

			{
				//Output
				//Output: 255 -> PORTB
				trisb = 0x00;
0065  1683  	BSF STATUS, RP0
0066  0186  	CLRF gbl_trisb

				portb = (255);
0067  30FF  	MOVLW 0xFF
0068  1283  	BCF STATUS, RP0
0069  0086  	MOVWF gbl_portb


				//Call Macro
				//Call Macro: 
				//No code generated because there is no macro name

				break;
006A  284A  	GOTO	label3

			}
			case 1:
0055  3A01  	XORLW 0x01
0056  1903  	BTFSC STATUS,Z
0057  286B  	GOTO	label5
006B        label5

			{
				//Output
				//Output: 254 -> PORTB
				trisb = 0x00;
006B  1683  	BSF STATUS, RP0
006C  0186  	CLRF gbl_trisb

				portb = (254);
006D  30FE  	MOVLW 0xFE
006E  1283  	BCF STATUS, RP0
006F  0086  	MOVWF gbl_portb


				//Delay
				//Delay: 500 ms
				delay_ms(255);
0070  30FF  	MOVLW 0xFF
0071  00C3  	MOVWF delay_ms_00000_arg_del
0072  2010  	CALL delay_ms_00000

				delay_ms(245);
0073  30F5  	MOVLW 0xF5
0074  00C3  	MOVWF delay_ms_00000_arg_del
0075  2010  	CALL delay_ms_00000


				//Output
				//Output: 255 -> PORTB
				trisb = 0x00;
0076  1683  	BSF STATUS, RP0
0077  0186  	CLRF gbl_trisb

				portb = (255);
0078  30FF  	MOVLW 0xFF
0079  1283  	BCF STATUS, RP0
007A  0086  	MOVWF gbl_portb


				//Delay
				//Delay: 500 ms
				delay_ms(255);
007B  00C3  	MOVWF delay_ms_00000_arg_del
007C  2010  	CALL delay_ms_00000

				delay_ms(245);
007D  30F5  	MOVLW 0xF5
007E  00C3  	MOVWF delay_ms_00000_arg_del
007F  2010  	CALL delay_ms_00000


				break;
0080  284A  	GOTO	label3

			}
			case 2:
0058  3A03  	XORLW 0x03
0059  1903  	BTFSC STATUS,Z
005A  2881  	GOTO	label6
0081        label6

			{
				//Output
				//Output: 253 -> PORTB
				trisb = 0x00;
0081  1683  	BSF STATUS, RP0
0082  0186  	CLRF gbl_trisb

				portb = (253);
0083  30FD  	MOVLW 0xFD
0084  1283  	BCF STATUS, RP0
0085  0086  	MOVWF gbl_portb


				//Delay
				//Delay: 500 ms
				delay_ms(255);
0086  30FF  	MOVLW 0xFF
0087  00C3  	MOVWF delay_ms_00000_arg_del
0088  2010  	CALL delay_ms_00000

				delay_ms(245);
0089  30F5  	MOVLW 0xF5
008A  00C3  	MOVWF delay_ms_00000_arg_del
008B  2010  	CALL delay_ms_00000


				//Output
				//Output: 255 -> PORTB
				trisb = 0x00;
008C  1683  	BSF STATUS, RP0
008D  0186  	CLRF gbl_trisb

				portb = (255);
008E  30FF  	MOVLW 0xFF
008F  1283  	BCF STATUS, RP0
0090  0086  	MOVWF gbl_portb


				//Delay
				//Delay: 500 ms
				delay_ms(255);
0091  00C3  	MOVWF delay_ms_00000_arg_del
0092  2010  	CALL delay_ms_00000

				delay_ms(245);
0093  30F5  	MOVLW 0xF5
0094  00C3  	MOVWF delay_ms_00000_arg_del
0095  2010  	CALL delay_ms_00000


				break;
0096  284A  	GOTO	label3

			}
			case 4:
005B  3A06  	XORLW 0x06
005C  1903  	BTFSC STATUS,Z
005D  2897  	GOTO	label7
0097        label7

			{
				//Call Macro
				//Call Macro: blink_cetiri()
				FCM_blink_cetiri();
0097  2028  	CALL FCM_blink__00051


				break;
0098  284A  	GOTO	label3

			}
			case 5:
005E  3A01  	XORLW 0x01
005F  1903  	BTFSC STATUS,Z
0060  2899  	GOTO	label8
0099        label8

			{
				//Call Macro
				//Call Macro: blink_cetiri()
				FCM_blink_cetiri();
0099  2028  	CALL FCM_blink__00051


				break;
009A  284A  	GOTO	label3

			}
			case 6:
0061  3A03  	XORLW 0x03
0062  1903  	BTFSC STATUS,Z
0063  289B  	GOTO	label9
009B        label9

			{
				//Call Macro
				//Call Macro: blink_cetiri()
				FCM_blink_cetiri();
009B  2028  	CALL FCM_blink__00051


				break;

			}
			// default:

		}


	}

	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
00C5  1283  	BCF STATUS, RP0
00C6  1303  	BCF STATUS, RP1
00C7  0E36  	SWAPF Int1BContext+D'2', W
00C8  0084  	MOVWF FSR
00C9  0E35  	SWAPF Int1BContext+D'1', W
00CA  008A  	MOVWF PCLATH
00CB  0E34  	SWAPF Int1BContext, W
00CC  0083  	MOVWF STATUS
00CD  0EFF  	SWAPF Int1Context, F
00CE  0E7F  	SWAPF Int1Context, W
00CF  0009  	RETFIE





////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  289D  	GOTO	_startup

0004  00FF  	MOVWF Int1Context
0005  0E03  	SWAPF STATUS, W
0006  1283  	BCF STATUS, RP0
0007  1303  	BCF STATUS, RP1
0008  00B4  	MOVWF Int1BContext
0009  0E0A  	SWAPF PCLATH, W
000A  00B5  	MOVWF Int1BContext+D'1'
000B  0E04  	SWAPF FSR, W
000C  00B6  	MOVWF Int1BContext+D'2'
000D  118A  	BCF PCLATH,3
000E  120A  	BCF PCLATH,4
000F  28C5  	GOTO	interrupt
0010        delay_ms_00000
0010        ; { delay_ms ; function begin
0010  08C3  	MOVF delay_ms_00000_arg_del, F
0011  1D03  	BTFSS STATUS,Z
0012  2814  	GOTO	label1
0013  0008  	RETURN
0014        label1
0014  30F9  	MOVLW 0xF9
0015        label2
0015  0000  	NOP
0016  0000  	NOP
0017  0000  	NOP
0018  0000  	NOP
0019  0000  	NOP
001A  0000  	NOP
001B  3EFF  	ADDLW 0xFF
001C  1D03  	BTFSS STATUS,Z
001D  2815  	GOTO	label2
001E  0000  	NOP
001F  0000  	NOP
0020  0000  	NOP
0021  0000  	NOP
0022  0000  	NOP
0023  0000  	NOP
0024  0000  	NOP
0025  0BC3  	DECFSZ delay_ms_00000_arg_del, F
0026  2814  	GOTO	label1
0027  0008  	RETURN
0028        ; } delay_ms function end


009D        _startup
009D  30D5  	MOVLW 0xD5
009E  1283  	BCF STATUS, RP0
009F  1303  	BCF STATUS, RP1
00A0  00A0  	MOVWF gbl_14_LSR
00A1  30C4  	MOVLW 0xC4
00A2  00A1  	MOVWF gbl_14_LSR+D'1'
00A3  30BB  	MOVLW 0xBB
00A4  00A2  	MOVWF gbl_14_LSR+D'2'
00A5  30DC  	MOVLW 0xDC
00A6  00A3  	MOVWF gbl_14_LSR+D'3'
00A7  01A4  	CLRF gbl_15_gbl_aSig
00A8  01A5  	CLRF gbl_15_gbl_aSig+D'1'
00A9  01A6  	CLRF gbl_15_gbl_aSig+D'2'
00AA  01A7  	CLRF gbl_15_gbl_aSig+D'3'
00AB  01A8  	CLRF gbl_15_gbl_bSig
00AC  01A9  	CLRF gbl_15_gbl_bSig+D'1'
00AD  01AA  	CLRF gbl_15_gbl_bSig+D'2'
00AE  01AB  	CLRF gbl_15_gbl_bSig+D'3'
00AF  01AC  	CLRF gbl_15_gbl_zSig
00B0  01AD  	CLRF gbl_15_gbl_zSig+D'1'
00B1  01AE  	CLRF gbl_15_gbl_zSig+D'2'
00B2  01AF  	CLRF gbl_15_gbl_zSig+D'3'
00B3  01BC  	CLRF gbl_15_gbl_aExp
00B4  01BD  	CLRF gbl_15_gbl_bExp
00B5  01B7  	CLRF gbl_15_gbl_zExp
00B6  01B8  	CLRF gbl_15_gbl_zExp+D'1'
00B7  01BE  	CLRF gbl_15_gbl_aSign
00B8  01BF  	CLRF gbl_15_gbl_bSign
00B9  01C0  	CLRF gbl_15_gbl_zSign
00BA  01C1  	CLRF gbl_15_gbl_zSigZero
00BB  01B0  	CLRF gbl_15_gbl_ret
00BC  01B1  	CLRF gbl_15_gbl_ret+D'1'
00BD  01B2  	CLRF gbl_15_gbl_ret+D'2'
00BE  01B3  	CLRF gbl_15_gbl_ret+D'3'
00BF  01BA  	CLRF gbl_float_rounding_mode
00C0  01BB  	CLRF gbl_float_exception_flags
00C1  01B9  	CLRF gbl_float_detect_tininess
00C2  118A  	BCF PCLATH,3
00C3  120A  	BCF PCLATH,4
00C4  283F  	GOTO	main

2007  3F7A  	DW 0x3F7A
